---
# Install development tools

# Add GitHub CLI repository
- name: Add GitHub CLI repository
  command: dnf config-manager addrepo --from-repofile=https://cli.github.com/packages/rpm/gh-cli.repo
  args:
    creates: /etc/yum.repos.d/gh-cli.repo
  tags:
    - development
    - packages
    - github-cli

# Install development tools
- name: Install development tools
  dnf:
    name: "{{ development_packages }}"
    state: present
  tags:
    - development
    - packages

# Install Java and Maven
- name: Install Java and Maven
  import_tasks: java_maven.yml
  tags:
    - development
    - java
    - maven

# Check current Git configurations
- name: Check current Git username
  shell: git config --global user.name
  register: current_git_username
  changed_when: false
  failed_when: false
  check_mode: no
  become: yes
  become_user: "{{ local_user }}"
  tags:
    - development
    - git

- name: Check current Git email
  shell: git config --global user.email
  register: current_git_email
  changed_when: false
  failed_when: false
  check_mode: no
  become: yes
  become_user: "{{ local_user }}"
  tags:
    - development
    - git

- name: Check current Git editor
  shell: git config --global core.editor
  register: current_git_editor
  changed_when: false
  failed_when: false
  check_mode: no
  become: yes
  become_user: "{{ local_user }}"
  tags:
    - development
    - git

# Configure Git only if needed
- name: Configure Git - username
  git_config:
    name: user.name
    scope: global
    value: "{{ git_config.user.name }}"
  when: current_git_username.stdout != git_config.user.name
  become: yes
  become_user: "{{ local_user }}"
  tags:
    - development
    - git

- name: Configure Git - email
  git_config:
    name: user.email
    scope: global
    value: "{{ git_config.user.email }}"
  when: current_git_email.stdout != git_config.user.email
  become: yes
  become_user: "{{ local_user }}"
  tags:
    - development
    - git

- name: Configure Git - editor
  git_config:
    name: core.editor
    scope: global
    value: "{{ git_config.core.editor }}"
  when: current_git_editor.stdout != git_config.core.editor
  become: yes
  become_user: "{{ local_user }}"
  tags:
    - development
    - git

# Verify requirements for Docker Desktop
- name: Check if system is 64-bit
  shell: uname -m
  register: architecture
  changed_when: false
  check_mode: no
  tags:
    - development
    - docker
    - docker_requirements

- name: Check available RAM memory
  shell: free -g | awk '/^Mem:/{print $2}'
  register: ram_size
  changed_when: false
  check_mode: no
  tags:
    - development
    - docker
    - docker_requirements

- name: Check KVM support
  shell: lsmod | grep kvm
  register: kvm_support
  changed_when: false
  failed_when: false
  check_mode: no
  tags:
    - development
    - docker
    - docker_requirements

- name: Check CPU virtualization support
  shell: grep -E 'svm|vmx' /proc/cpuinfo
  register: virt_support
  changed_when: false
  failed_when: false
  check_mode: no
  tags:
    - development
    - docker
    - docker_requirements

- name: Check GNOME desktop environment
  stat:
    path: /usr/bin/gnome-session
  register: gnome_check
  check_mode: no
  tags:
    - development
    - docker
    - docker_requirements

- name: Check KDE desktop environment
  stat:
    path: /usr/bin/startkde
  register: kde_check
  check_mode: no
  tags:
    - development
    - docker
    - docker_requirements

- name: Check KDE Plasma desktop environment
  stat:
    path: /usr/bin/startplasma-x11
  register: kde_plasma_check
  check_mode: no
  tags:
    - development
    - docker
    - docker_requirements

- name: Check systemd as init system
  shell: ps -p 1 | grep systemd
  register: systemd_check
  changed_when: false
  failed_when: false
  check_mode: no
  tags:
    - development
    - docker
    - docker_requirements

- name: Check if all requirements are met
  assert:
    that:
      - architecture.stdout == "x86_64"
      - ram_size.stdout | int >= 4
      - kvm_support.rc == 0
      - virt_support.rc == 0
      - gnome_check.stat.exists or kde_check.stat.exists or kde_plasma_check.stat.exists
      - systemd_check.rc == 0
    fail_msg: "The system does not meet the minimum requirements for Docker Desktop. Verify that the system is 64-bit, has at least 4GB of RAM, KVM support, CPU virtualization support, GNOME or KDE desktop environment, and systemd as init system."
    success_msg: "The system meets all requirements for Docker Desktop."
  register: docker_requirements_check
  tags:
    - development
    - docker
    - docker_requirements

# Install Docker Desktop
- name: Check if Docker Desktop is already installed
  stat:
    path: /opt/docker-desktop
  register: docker_desktop_check
  check_mode: no  # Run even in check mode
  tags:
    - development
    - docker

- name: Check if docker group exists
  command: getent group docker
  register: docker_group
  changed_when: false
  failed_when: false
  check_mode: no  # Run even in check mode
  tags:
    - development
    - docker

# Use official Docker repository setup approach
- name: Install dnf-plugins-core
  command: dnf -y install dnf-plugins-core
  args:
    creates: /usr/bin/dnf-3
  tags:
    - development
    - docker

- name: Add Docker CE repository using dnf-3 config-manager
  command: dnf-3 config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo
  args:
    creates: /etc/yum.repos.d/docker-ce.repo
  tags:
    - development
    - docker

- name: Download Docker Desktop RPM package
  get_url:
    url: https://desktop.docker.com/linux/main/amd64/docker-desktop-x86_64.rpm
    dest: /tmp/docker-desktop-x86_64.rpm
    mode: '0644'
  when: 
    - not docker_desktop_check.stat.exists
    - docker_requirements_check is success
  tags:
    - development
    - docker

- name: Install Docker Desktop
  dnf:
    name: /tmp/docker-desktop-x86_64.rpm
    state: present
    disable_gpg_check: yes
  when: 
    - not docker_desktop_check.stat.exists
    - docker_requirements_check is success
  tags:
    - development
    - docker

- name: Remove downloaded RPM package
  file:
    path: /tmp/docker-desktop-x86_64.rpm
    state: absent
  when: 
    - not docker_desktop_check.stat.exists
    - docker_requirements_check is success
  tags:
    - development
    - docker

# Check if user is already in docker group
- name: Check if user is in docker group
  shell: id -nG {{ ansible_user_id }} | grep -o docker
  register: user_in_docker_group
  changed_when: false
  failed_when: false
  check_mode: no
  tags:
    - development
    - docker

- name: Add current user to docker group
  user:
    name: "{{ ansible_user_id }}"
    groups: docker
    append: yes
  when: 
    - docker_group.rc == 0
    - docker_requirements_check is success
    - user_in_docker_group.rc != 0
  tags:
    - development
    - docker

# Configure Docker credentials with pass
- name: Include Docker pass configuration tasks
  include_tasks: docker_pass.yml
  when: docker_requirements_check is success
  tags:
    - development
    - docker
    - docker_credentials

# Install pipx for Python package management
- name: Install pipx
  dnf:
    name: pipx
    state: present
  tags:
    - development
    - python

- name: Ensure pipx is configured for the local user
  become: yes
  become_user: "{{ local_user }}"
  shell: |
    pipx ensurepath
  args:
    executable: /bin/bash
  register: pipx_config
  changed_when: pipx_config.rc != 0
  failed_when: false
  tags:
    - development
    - python

# Install Poetry using pipx
- name: Check if Poetry is installed
  become: yes
  become_user: "{{ local_user }}"
  shell: |
    pipx list | grep poetry
  args:
    executable: /bin/bash
  register: poetry_check
  changed_when: false
  failed_when: false
  tags:
    - development
    - python

- name: Install Poetry using pipx
  become: yes
  become_user: "{{ local_user }}"
  shell: |
    pipx install poetry
  args:
    executable: /bin/bash
  register: poetry_install
  changed_when: poetry_install.rc == 0
  when: poetry_check.rc != 0
  tags:
    - development
    - python

# Install uv (fast Python package manager)
- name: Check if uv is already installed at {{ uv_install_path }}
  stat:
    path: "{{ uv_install_path }}"
  register: uv_binary_check
  tags:
    - development
    - python
    - uv

- name: Check uv version if installed
  command: "{{ uv_install_path }} --version"
  register: uv_current_version_output
  when: uv_binary_check.stat.exists
  changed_when: false
  failed_when: false # Don't fail if the command fails
  check_mode: no
  tags:
    - development
    - python
    - uv

- name: Extract installed uv version
  set_fact:
    uv_installed_version: "{{ uv_current_version_output.stdout | regex_search('uv (\\d+\\.\\d+\\.\\d+)', '\\1') | first }}"
  when: 
    - uv_binary_check.stat.exists
    - uv_current_version_output.rc == 0
  tags:
    - development
    - python
    - uv

- name: Determine if uv needs installation or update
  set_fact:
    uv_needs_install: "{{ not uv_binary_check.stat.exists or uv_installed_version is not defined or uv_installed_version != uv_version }}"
  tags:
    - development
    - python
    - uv

- name: Download uv {{ uv_version }} tarball
  get_url:
    url: "{{ uv_download_url }}"
    dest: "{{ uv_tmp_archive }}"
    checksum: "{{ uv_checksum }}"
    mode: '0644'
  when: uv_needs_install
  tags:
    - development
    - python
    - uv

- name: Create temporary directory for uv extraction
  file:
    path: "{{ uv_tmp_extract_dir }}"
    state: directory
    mode: '0755'
  when: uv_needs_install
  tags:
    - development
    - python
    - uv

- name: Extract uv tarball
  unarchive:
    src: "{{ uv_tmp_archive }}"
    dest: "{{ uv_tmp_extract_dir }}"
    remote_src: yes
  when: uv_needs_install
  tags:
    - development
    - python
    - uv

- name: Move uv binary to {{ uv_install_path }}
  copy:
    src: "{{ uv_tmp_extract_dir }}/uv-{{ uv_platform }}/uv"
    dest: "{{ uv_install_path }}"
    mode: '0755'
    remote_src: yes
  become: true
  when: uv_needs_install
  tags:
    - development
    - python
    - uv

- name: Clean up uv temporary files
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ uv_tmp_archive }}"
    - "{{ uv_tmp_extract_dir }}"
  when: uv_needs_install
  tags:
    - development
    - python
    - uv

# Install Windsurf AI using YUM repository
- name: Import Windsurf GPG key
  ansible.builtin.rpm_key:
    state: present
    key: https://windsurf-stable.codeiumdata.com/wVxQEIWkwPUEAGf3/yum/RPM-GPG-KEY-windsurf
  become: yes
  tags:
    - development
    - windsurf

- name: Add Windsurf YUM repository
  ansible.builtin.yum_repository:
    name: windsurf
    description: Windsurf Repository
    baseurl: https://windsurf-stable.codeiumdata.com/wVxQEIWkwPUEAGf3/yum/repo/
    enabled: yes
    gpgcheck: yes
    gpgkey: https://windsurf-stable.codeiumdata.com/wVxQEIWkwPUEAGf3/yum/RPM-GPG-KEY-windsurf
    state: present
  become: yes
  tags:
    - development
    - windsurf

- name: Install or Update Windsurf
  ansible.builtin.dnf:
    name: windsurf
    state: latest # Installs if not present, updates to latest if present
    update_cache: yes # Recommended before installing/updating packages
  become: yes
  tags:
    - development
    - windsurf

# Ensure Windsurf is accessible from the custom bin_dir if it exists
- name: Check if Windsurf is in custom bin_dir PATH
  stat:
    path: "{{ bin_dir | default('/usr/local/bin') }}/windsurf"
  register: windsurf_in_custom_path
  tags:
    - development
    - windsurf

- name: Create symbolic link to Windsurf in custom bin_dir if not already present
  file:
    src: /usr/bin/windsurf  # Standard path after RPM install
    dest: "{{ bin_dir | default('/usr/local/bin') }}/windsurf"
    state: link
    force: yes # Overwrite if an incorrect link/file exists
  become: true
  when:
    - bin_dir is defined
    - bin_dir != '/usr/bin' # Only if custom bin_dir is different from where RPM installs
    - not windsurf_in_custom_path.stat.exists
  tags:
    - development
    - windsurf

# Check if Cursor is already installed
- name: Check if Cursor AppImage exists
  stat:
    path: "{{ cursor_appimage_dest }}"
  register: cursor_appimage_check
  tags:
    - development
    - cursor

- name: Check if Cursor version metadata file exists
  stat:
    path: "{{ cursor_metadata_file }}"
  register: cursor_metadata_check
  tags:
    - development
    - cursor

- name: Extract version from cursor_appimage_url
  set_fact:
    new_cursor_version: "{{ cursor_appimage_url | regex_search('Cursor-([0-9]+\\.[0-9]+\\.[0-9]+)', '\\1') | first }}"
  tags:
    - development
    - cursor

- name: Debug cursor_appimage_url and extracted version
  debug:
    msg: 
      - "URL: {{ cursor_appimage_url }}"
      - "Extracted version: {{ new_cursor_version }}"
  tags:
    - development
    - cursor

- name: Read installed Cursor version from metadata file
  slurp:
    src: "{{ cursor_metadata_file }}"
  register: installed_cursor_version_raw
  when: cursor_metadata_check.stat.exists
  tags:
    - development
    - cursor

- name: Set installed Cursor version from metadata
  set_fact:
    installed_cursor_version: "{{ installed_cursor_version_raw.content | b64decode | trim }}"
  when: cursor_metadata_check.stat.exists and installed_cursor_version_raw is success
  tags:
    - development
    - cursor

- name: Set default version for Cursor if no metadata exists
  set_fact:
    installed_cursor_version: "0.0.0"
  when: not cursor_metadata_check.stat.exists
  tags:
    - development
    - cursor

- name: Debug version comparison
  debug:
    msg:
      - "Installed Cursor version: {{ installed_cursor_version | default('unknown') }}"
      - "New Cursor version: {{ new_cursor_version }}"
  tags:
    - development
    - cursor

- name: Set version check result
  set_fact:
    cursor_needs_update: "{{ not cursor_appimage_check.stat.exists or installed_cursor_version != new_cursor_version }}"
  tags:
    - development
    - cursor

- name: Debug update decision
  debug:
    msg: "Cursor needs update: {{ cursor_needs_update }}"
  tags:
    - development
    - cursor

- name: Check if Cursor is in PATH
  stat:
    path: "{{ bin_dir | default('/usr/local/bin') }}/cursor"
  register: cursor_in_path
  tags:
    - development
    - cursor

# Remove old Cursor version if a different version is being installed
- name: Remove old Cursor AppImage if version is different
  file:
    path: "{{ cursor_appimage_dest }}"
    state: absent
  when: cursor_appimage_check.stat.exists and cursor_needs_update
  tags:
    - development
    - cursor

# Install Cursor AppImage
- name: Create directory for AppImages
  file:
    path: "{{ appimages_dir }}"
    state: directory
    mode: '0755'
  when: cursor_needs_update or not cursor_in_path.stat.exists
  tags:
    - development
    - cursor

- name: Download Cursor AppImage
  get_url:
    url: "{{ cursor_appimage_url }}"
    dest: "{{ cursor_appimage_dest }}"
    mode: '0755'
  when: cursor_needs_update
  tags:
    - development
    - cursor

- name: Save new Cursor version to metadata file
  copy:
    content: "{{ new_cursor_version }}"
    dest: "{{ cursor_metadata_file }}"
    mode: '0644'
  when: cursor_needs_update
  tags:
    - development
    - cursor

- name: Create temporary directory for AppImage extraction
  file:
    path: /tmp/cursor-extract
    state: directory
    mode: '0755'
  when: cursor_needs_update
  tags:
    - development
    - cursor

- name: Extract AppImage to get icon
  command: "{{ cursor_appimage_dest }} --appimage-extract"
  args:
    chdir: /tmp/cursor-extract
    creates: /tmp/cursor-extract/squashfs-root
  when: cursor_needs_update
  tags:
    - development
    - cursor

- name: Find icon file
  find:
    paths: /tmp/cursor-extract/squashfs-root
    patterns: "*.png,*.svg,*.ico"
    recurse: yes
  register: icon_files
  when: cursor_needs_update
  tags:
    - development
    - cursor

- name: Create icons directory if it doesn't exist
  file:
    path: "{{ cursor_icon_dest | dirname }}"
    state: directory
    mode: '0755'
  when: cursor_needs_update
  tags:
    - development
    - cursor

- name: Copy icon to system icons directory
  copy:
    src: "{{ icon_files.files[0].path }}"
    dest: "{{ cursor_icon_dest }}"
    mode: '0644'
    remote_src: yes
  when: cursor_needs_update and icon_files.files | length > 0
  tags:
    - development
    - cursor

- name: Create desktop entry for Cursor
  template:
    src: cursor.desktop.j2
    dest: "{{ cursor_desktop_entry_dest }}"
    mode: '0644'
  when: cursor_needs_update
  tags:
    - development
    - cursor

# Add Cursor to PATH
- name: Create bin directory if it doesn't exist
  file:
    path: "{{ bin_dir | default('/usr/local/bin') }}"
    state: directory
    mode: '0755'
  become: true
  when: not cursor_in_path.stat.exists
  tags:
    - development
    - cursor

- name: Create symbolic link to Cursor in PATH
  file:
    src: "{{ cursor_appimage_dest }}"
    dest: "{{ bin_dir | default('/usr/local/bin') }}/cursor"
    state: link
  become: true
  when: not cursor_in_path.stat.exists or cursor_needs_update
  tags:
    - development
    - cursor

- name: Clean up temporary extraction directory
  file:
    path: /tmp/cursor-extract
    state: absent
  when: cursor_needs_update
  tags:
    - development
    - cursor

# Flutter SDK installation
- name: Create development directory
  file:
    path: "/home/{{ local_user }}/development"
    state: directory
    mode: '0755'
    owner: "{{ local_user }}"
    group: "{{ local_user }}"
  tags:
    - development
    - flutter

- name: Check if Flutter is already installed
  stat:
    path: "/home/{{ local_user }}/development/flutter"
  register: flutter_installed
  tags:
    - development
    - flutter

- name: Download Flutter SDK tarball
  get_url:
    url: "https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_3.29.2-stable.tar.xz"
    dest: "/tmp/flutter_linux_3.29.2-stable.tar.xz"
    mode: '0644'
  when: not flutter_installed.stat.exists
  tags:
    - development
    - flutter

- name: Extract Flutter SDK
  unarchive:
    src: "/tmp/flutter_linux_3.29.2-stable.tar.xz"
    dest: "/home/{{ local_user }}/development/"
    remote_src: yes
    owner: "{{ local_user }}"
    group: "{{ local_user }}"
  when: not flutter_installed.stat.exists
  tags:
    - development
    - flutter

- name: Add Flutter to PATH in .bashrc
  lineinfile:
    path: "/home/{{ local_user }}/.bashrc"
    line: 'export PATH="$PATH:/home/{{ local_user }}/development/flutter/bin"'
    state: present
    regexp: 'export PATH="\$PATH:/home/{{ local_user }}/development/flutter/bin"'
  tags:
    - development
    - flutter

# Clean up Flutter tarball
- name: Clean up Flutter tarball
  file:
    path: "/tmp/flutter_linux_3.29.2-stable.tar.xz"
    state: absent
  when: not flutter_installed.stat.exists
  tags:
    - development
    - flutter

# Configure Flutter settings
- name: Check Flutter analytics status
  become_user: "{{ local_user }}"
  shell: |
    ~/development/flutter/bin/flutter config
  register: flutter_config
  changed_when: false
  check_mode: no
  tags:
    - development
    - flutter

- name: Disable Flutter analytics
  become_user: "{{ local_user }}"
  shell: |
    ~/development/flutter/bin/flutter config --no-analytics
  when: flutter_config.stdout is defined and "Analytics reporting is currently disabled" not in flutter_config.stdout
  tags:
    - development
    - flutter

# Install required Linux dependencies for Flutter development
- name: Install Flutter Linux development dependencies
  dnf:
    name:
      - clang
      - cmake
      - ninja-build
      - pkg-config
      - gtk3-devel
      - libstdc++-devel
      - lcov
    state: present
  tags:
    - development
    - flutter
