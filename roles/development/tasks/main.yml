---
# Install development tools
- name: Install development tools
  dnf:
    name: "{{ development_packages }}"
    state: present
  tags:
    - development
    - packages

# Check current Git configurations
- name: Check current Git username
  shell: git config --global user.name
  register: current_git_username
  changed_when: false
  failed_when: false
  check_mode: no
  tags:
    - development
    - git

- name: Check current Git email
  shell: git config --global user.email
  register: current_git_email
  changed_when: false
  failed_when: false
  check_mode: no
  tags:
    - development
    - git

- name: Check current Git editor
  shell: git config --global core.editor
  register: current_git_editor
  changed_when: false
  failed_when: false
  check_mode: no
  tags:
    - development
    - git

# Configure Git only if needed
- name: Configure Git - username
  git_config:
    name: user.name
    scope: global
    value: "{{ git_config.user.name }}"
  when: current_git_username.stdout != git_config.user.name
  tags:
    - development
    - git

- name: Configure Git - email
  git_config:
    name: user.email
    scope: global
    value: "{{ git_config.user.email }}"
  when: current_git_email.stdout != git_config.user.email
  tags:
    - development
    - git

- name: Configure Git - editor
  git_config:
    name: core.editor
    scope: global
    value: "{{ git_config.core.editor }}"
  when: current_git_editor.stdout != git_config.core.editor
  tags:
    - development
    - git

# Verify requirements for Docker Desktop
- name: Check if system is 64-bit
  shell: uname -m
  register: architecture
  changed_when: false
  check_mode: no
  tags:
    - development
    - docker
    - docker_requirements

- name: Check available RAM memory
  shell: free -g | awk '/^Mem:/{print $2}'
  register: ram_size
  changed_when: false
  check_mode: no
  tags:
    - development
    - docker
    - docker_requirements

- name: Check KVM support
  shell: lsmod | grep kvm
  register: kvm_support
  changed_when: false
  failed_when: false
  check_mode: no
  tags:
    - development
    - docker
    - docker_requirements

- name: Check CPU virtualization support
  shell: grep -E 'svm|vmx' /proc/cpuinfo
  register: virt_support
  changed_when: false
  failed_when: false
  check_mode: no
  tags:
    - development
    - docker
    - docker_requirements

- name: Check GNOME desktop environment
  stat:
    path: /usr/bin/gnome-session
  register: gnome_check
  check_mode: no
  tags:
    - development
    - docker
    - docker_requirements

- name: Check KDE desktop environment
  stat:
    path: /usr/bin/startkde
  register: kde_check
  check_mode: no
  tags:
    - development
    - docker
    - docker_requirements

- name: Check KDE Plasma desktop environment
  stat:
    path: /usr/bin/startplasma-x11
  register: kde_plasma_check
  check_mode: no
  tags:
    - development
    - docker
    - docker_requirements

- name: Check systemd as init system
  shell: ps -p 1 | grep systemd
  register: systemd_check
  changed_when: false
  failed_when: false
  check_mode: no
  tags:
    - development
    - docker
    - docker_requirements

- name: Check if all requirements are met
  assert:
    that:
      - architecture.stdout == "x86_64"
      - ram_size.stdout | int >= 4
      - kvm_support.rc == 0
      - virt_support.rc == 0
      - gnome_check.stat.exists or kde_check.stat.exists or kde_plasma_check.stat.exists
      - systemd_check.rc == 0
    fail_msg: "The system does not meet the minimum requirements for Docker Desktop. Verify that the system is 64-bit, has at least 4GB of RAM, KVM support, CPU virtualization support, GNOME or KDE desktop environment, and systemd as init system."
    success_msg: "The system meets all requirements for Docker Desktop."
  register: docker_requirements_check
  tags:
    - development
    - docker
    - docker_requirements

# Install Docker Desktop
- name: Check if Docker Desktop is already installed
  stat:
    path: /opt/docker-desktop
  register: docker_desktop_check
  check_mode: no  # Run even in check mode
  tags:
    - development
    - docker

- name: Check if docker group exists
  command: getent group docker
  register: docker_group
  changed_when: false
  failed_when: false
  check_mode: no  # Run even in check mode
  tags:
    - development
    - docker

- name: Download Docker Desktop RPM package
  get_url:
    url: https://desktop.docker.com/linux/main/amd64/docker-desktop-x86_64.rpm
    dest: /tmp/docker-desktop-x86_64.rpm
    mode: '0644'
  when: 
    - not docker_desktop_check.stat.exists
    - docker_requirements_check is success
  tags:
    - development
    - docker

- name: Install Docker Desktop
  dnf:
    name: /tmp/docker-desktop-x86_64.rpm
    state: present
    disable_gpg_check: yes
  when: 
    - not docker_desktop_check.stat.exists
    - docker_requirements_check is success
  tags:
    - development
    - docker

- name: Remove downloaded RPM package
  file:
    path: /tmp/docker-desktop-x86_64.rpm
    state: absent
  when: 
    - not docker_desktop_check.stat.exists
    - docker_requirements_check is success
  tags:
    - development
    - docker

# Check if user is already in docker group
- name: Check if user is in docker group
  shell: id -nG {{ ansible_user_id }} | grep -o docker
  register: user_in_docker_group
  changed_when: false
  failed_when: false
  check_mode: no
  tags:
    - development
    - docker

- name: Add current user to docker group
  user:
    name: "{{ ansible_user_id }}"
    groups: docker
    append: yes
  when: 
    - docker_group.rc == 0
    - docker_requirements_check is success
    - user_in_docker_group.rc != 0
  tags:
    - development
    - docker

# Install pipx for Python package management
- name: Install pipx
  dnf:
    name: pipx
    state: present
  tags:
    - development
    - python

- name: Ensure pipx is configured for the local user
  become: yes
  become_user: "{{ local_user }}"
  shell: |
    pipx ensurepath
  args:
    executable: /bin/bash
  register: pipx_config
  changed_when: pipx_config.rc != 0
  failed_when: false
  tags:
    - development
    - python

# Install Poetry using pipx
- name: Check if Poetry is installed
  become: yes
  become_user: "{{ local_user }}"
  shell: |
    pipx list | grep poetry
  args:
    executable: /bin/bash
  register: poetry_check
  changed_when: false
  failed_when: false
  tags:
    - development
    - python

- name: Install Poetry using pipx
  become: yes
  become_user: "{{ local_user }}"
  shell: |
    pipx install poetry
  args:
    executable: /bin/bash
  register: poetry_install
  changed_when: poetry_install.rc == 0
  when: poetry_check.rc != 0
  tags:
    - development
    - python 