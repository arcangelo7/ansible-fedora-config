---
# Install Discord from Flathub
- name: Check if Flathub is enabled
  command: flatpak remotes --columns=name
  register: flatpak_remotes
  changed_when: false
  tags:
    - applications
    - discord

- name: Enable Flathub if not already enabled
  command: flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
  when: "'flathub' not in flatpak_remotes.stdout"
  tags:
    - applications
    - discord

- name: Check if Discord is already installed
  command: flatpak list --app --columns=application
  register: installed_flatpaks
  changed_when: false
  tags:
    - applications
    - discord

- name: Install Discord Flatpak
  community.general.flatpak:
    name: "{{ discord_flatpak_app_id }}"
    state: present
  tags:
    - applications
    - discord

- name: Install VLC Flatpak
  community.general.flatpak:
    name: "{{ vlc_flatpak_app_id }}"
    state: present
  tags:
    - applications
    - vlc

- name: Install Pinta Flatpak
  community.general.flatpak:
    name: "{{ pinta_flatpak_app_id }}"
    state: present
  tags:
    - applications
    - pinta

- name: Install Inkscape Flatpak
  community.general.flatpak:
    name: "{{ inkscape_flatpak_app_id }}"
    state: present
  tags:
    - applications
    - inkscape

- name: Install Zoom Flatpak
  community.general.flatpak:
    name: "{{ zoom_flatpak_app_id }}"
    state: present
  tags:
    - applications
    - zoom

- name: Install Stremio Flatpak
  community.general.flatpak:
    name: "{{ stremio_flatpak_app_id }}"
    state: present
  tags:
    - applications
    - stremio

- name: Install Telegram Flatpak
  community.general.flatpak:
    name: "{{ telegram_flatpak_app_id }}"
    state: present
  tags:
    - applications
    - telegram

- name: Install qBittorrent Flatpak
  community.general.flatpak:
    name: "{{ qbittorrent_flatpak_app_id }}"
    state: present
  tags:
    - applications
    - qbittorrent

# Install Joplin AppImage
# Check if Joplin is already installed
- name: Check if Joplin AppImage exists
  stat:
    path: "{{ joplin_appimage_dest }}"
  register: joplin_appimage_check
  tags:
    - applications
    - joplin

- name: Check if Joplin version metadata file exists
  stat:
    path: "{{ joplin_metadata_file }}"
  register: joplin_metadata_check
  tags:
    - applications
    - joplin

- name: Extract version from joplin_appimage_url
  set_fact:
    new_joplin_version: "{{ joplin_appimage_url | regex_search('Joplin-([0-9]+\\.[0-9]+\\.[0-9]+)', '\\1') | first }}"
  tags:
    - applications
    - joplin

- name: Debug joplin_appimage_url and extracted version
  debug:
    msg: 
      - "URL: {{ joplin_appimage_url }}"
      - "Extracted version: {{ new_joplin_version }}"
  tags:
    - applications
    - joplin

- name: Read installed Joplin version from metadata file
  slurp:
    src: "{{ joplin_metadata_file }}"
  register: installed_joplin_version_raw
  when: joplin_metadata_check.stat.exists
  tags:
    - applications
    - joplin

- name: Set installed Joplin version from metadata
  set_fact:
    installed_joplin_version: "{{ installed_joplin_version_raw.content | b64decode | trim }}"
  when: joplin_metadata_check.stat.exists and installed_joplin_version_raw is success
  tags:
    - applications
    - joplin

- name: Set default version for Joplin if no metadata exists
  set_fact:
    installed_joplin_version: "0.0.0"
  when: not joplin_metadata_check.stat.exists
  tags:
    - applications
    - joplin

- name: Debug version comparison
  debug:
    msg:
      - "Installed Joplin version: {{ installed_joplin_version | default('unknown') }}"
      - "New Joplin version: {{ new_joplin_version }}"
  tags:
    - applications
    - joplin

- name: Set version check result
  set_fact:
    joplin_needs_update: "{{ not joplin_appimage_check.stat.exists or installed_joplin_version != new_joplin_version }}"
  tags:
    - applications
    - joplin

- name: Debug update decision
  debug:
    msg: "Joplin needs update: {{ joplin_needs_update }}"
  tags:
    - applications
    - joplin

- name: Check if Joplin is in PATH
  stat:
    path: "{{ bin_dir | default('/usr/local/bin') }}/joplin-gui"
  register: joplin_in_path
  tags:
    - applications
    - joplin

# Remove old Joplin version if a different version is being installed
- name: Remove old Joplin AppImage if version is different
  file:
    path: "{{ joplin_appimage_dest }}"
    state: absent
  when: joplin_appimage_check.stat.exists and joplin_needs_update
  tags:
    - applications
    - joplin

# Install Joplin AppImage
- name: Create directory for AppImages
  file:
    path: "{{ appimages_dir }}"
    state: directory
    mode: '0755'
  when: joplin_needs_update or not joplin_in_path.stat.exists
  tags:
    - applications
    - joplin

- name: Download Joplin AppImage
  get_url:
    url: "{{ joplin_appimage_url }}"
    dest: "{{ joplin_appimage_dest }}"
    mode: '0755'
  when: joplin_needs_update
  tags:
    - applications
    - joplin

- name: Save new Joplin version to metadata file
  copy:
    content: "{{ new_joplin_version }}"
    dest: "{{ joplin_metadata_file }}"
    mode: '0644'
  when: joplin_needs_update
  tags:
    - applications
    - joplin

- name: Create temporary directory for AppImage extraction
  file:
    path: /tmp/joplin-extract
    state: directory
    mode: '0755'
  when: joplin_needs_update
  tags:
    - applications
    - joplin

- name: Extract AppImage to get icon
  command: "{{ joplin_appimage_dest }} --appimage-extract"
  args:
    chdir: /tmp/joplin-extract
    creates: /tmp/joplin-extract/squashfs-root
  when: joplin_needs_update
  tags:
    - applications
    - joplin

- name: Find icon file
  find:
    paths: /tmp/joplin-extract/squashfs-root
    patterns: "*.png,*.svg,*.ico"
    recurse: yes
  register: icon_files
  when: joplin_needs_update
  tags:
    - applications
    - joplin

- name: Create icons directory if it doesn't exist
  file:
    path: "{{ joplin_icon_dest | dirname }}"
    state: directory
    mode: '0755'
  when: joplin_needs_update
  tags:
    - applications
    - joplin

- name: Copy icon to system icons directory
  copy:
    src: "{{ icon_files.files[0].path }}"
    dest: "{{ joplin_icon_dest }}"
    mode: '0644'
    remote_src: yes
  when: joplin_needs_update and icon_files.files | length > 0
  tags:
    - applications
    - joplin

- name: Create desktop entry for Joplin
  template:
    src: joplin.desktop.j2
    dest: "{{ joplin_desktop_entry_dest }}"
    mode: '0644'
  when: joplin_needs_update
  tags:
    - applications
    - joplin

# Add Joplin to PATH
- name: Create bin directory if it doesn't exist
  file:
    path: "{{ bin_dir | default('/usr/local/bin') }}"
    state: directory
    mode: '0755'
  become: true
  when: not joplin_in_path.stat.exists
  tags:
    - applications
    - joplin

- name: Create symbolic link to Joplin in PATH
  file:
    src: "{{ joplin_appimage_dest }}"
    dest: "{{ bin_dir | default('/usr/local/bin') }}/joplin-gui"
    state: link
  become: true
  when: not joplin_in_path.stat.exists or joplin_needs_update
  tags:
    - applications
    - joplin

- name: Clean up temporary extraction directory
  file:
    path: /tmp/joplin-extract
    state: absent
  when: joplin_needs_update
  tags:
    - applications
    - joplin

# Install Joplin CLI (terminal version)
- name: Install Node.js and npm (required for Joplin CLI)
  dnf:
    name: 
      - nodejs
      - npm
    state: present
  tags:
    - applications
    - joplin-cli

- name: Install Joplin CLI globally with npm
  npm:
    name: joplin
    global: yes
    state: present
  tags:
    - applications
    - joplin-cli

# Configure Joplin CLI sync - Approccio basato su file di stato
- name: Check if Joplin CLI configuration state file exists
  stat:
    path: "/home/{{ local_user }}/.joplin-cli-state.json"
  register: joplin_config_state
  become: false
  become_user: "{{ local_user }}"
  tags:
    - applications
    - joplin-cli
    - joplin-sync

- name: Create Joplin CLI configuration state file if it doesn't exist
  copy:
    content: '{}'
    dest: "/home/{{ local_user }}/.joplin-cli-state.json"
    mode: '0644'
  become: false
  become_user: "{{ local_user }}"
  when: not joplin_config_state.stat.exists
  tags:
    - applications
    - joplin-cli
    - joplin-sync

- name: Read Joplin CLI configuration state file
  slurp:
    src: "/home/{{ local_user }}/.joplin-cli-state.json"
  register: joplin_config_state_content
  become: false
  become_user: "{{ local_user }}"
  tags:
    - applications
    - joplin-cli
    - joplin-sync

- name: Parse Joplin CLI configuration state
  set_fact:
    joplin_config_state_json: "{{ joplin_config_state_content['content'] | b64decode | from_json }}"
  tags:
    - applications
    - joplin-cli
    - joplin-sync

- name: Configure Joplin CLI sync target
  command: joplin config sync.target {{ joplin_sync_target }}
  become: false
  become_user: "{{ local_user }}"
  register: joplin_sync_target_result
  changed_when: joplin_sync_target_result.rc == 0
  failed_when: joplin_sync_target_result.rc != 0
  when: joplin_config_state_json.sync_target is not defined or joplin_config_state_json.sync_target != joplin_sync_target|string
  tags:
    - applications
    - joplin-cli
    - joplin-sync

- name: Configure Joplin CLI WebDAV path
  command: joplin config sync.5.path {{ joplin_sync_webdav_path }}
  become: false
  become_user: "{{ local_user }}"
  register: joplin_sync_path_result
  changed_when: joplin_sync_path_result.rc == 0
  failed_when: joplin_sync_path_result.rc != 0
  when: joplin_config_state_json.webdav_path is not defined or joplin_config_state_json.webdav_path != joplin_sync_webdav_path
  tags:
    - applications
    - joplin-cli
    - joplin-sync

- name: Configure Joplin CLI WebDAV username
  command: joplin config sync.5.username {{ joplin_sync_webdav_username }}
  become: false
  become_user: "{{ local_user }}"
  register: joplin_sync_username_result
  changed_when: joplin_sync_username_result.rc == 0
  failed_when: joplin_sync_username_result.rc != 0
  when: joplin_config_state_json.webdav_username is not defined or joplin_config_state_json.webdav_username != joplin_sync_webdav_username
  tags:
    - applications
    - joplin-cli
    - joplin-sync

- name: Check if Joplin CLI WebDAV password is actually set
  command: joplin config sync.5.password
  become: false
  become_user: "{{ local_user }}"
  register: joplin_current_password
  changed_when: false
  failed_when: false
  tags:
    - applications
    - joplin-cli
    - joplin-sync

- name: Configure Joplin CLI WebDAV password
  command: joplin config sync.5.password {{ joplin_sync_webdav_password }}
  become: false
  become_user: "{{ local_user }}"
  register: joplin_sync_password_result
  changed_when: joplin_sync_password_result.rc == 0
  failed_when: joplin_sync_password_result.rc != 0
  no_log: true
  when:
    - joplin_sync_webdav_password != ""
    - joplin_current_password.stdout is defined
    - joplin_current_password.stdout | trim == "sync.5.password ="
  tags:
    - applications
    - joplin-cli
    - joplin-sync

- name: Update Joplin CLI configuration state file
  copy:
    content: "{{ updated_joplin_config_state | to_nice_json }}"
    dest: "/home/{{ local_user }}/.joplin-cli-state.json"
    mode: '0644'
  become: false
  become_user: "{{ local_user }}"
  vars:
    updated_joplin_config_state:
      sync_target: "{{ joplin_sync_target|string }}"
      webdav_path: "{{ joplin_sync_webdav_path }}"
      webdav_username: "{{ joplin_sync_webdav_username }}"
      webdav_password_set: true
  tags:
    - applications
    - joplin-cli
    - joplin-sync

# Esegui la sincronizzazione iniziale di Joplin
- name: Esegui la sincronizzazione di Joplin CLI
  command: joplin sync
  become: false
  become_user: "{{ local_user }}"
  register: joplin_sync_result
  changed_when: joplin_sync_result.rc == 0
  failed_when: false  # Non fallire se la sincronizzazione non riesce
  tags:
    - applications
    - joplin-cli
    - joplin-sync

- name: Mostra il risultato della sincronizzazione
  debug:
    msg: "Risultato sincronizzazione: {{ joplin_sync_result.stdout }}"
  when: joplin_sync_result.stdout is defined
  tags:
    - applications
    - joplin-cli
    - joplin-sync

# Install Jimmy CLI
- name: Download Jimmy CLI
  get_url:
    url: "{{ jimmy_download_url }}"
    dest: "{{ jimmy_install_path }}"
    mode: '0755'
  tags:
    - applications
    - jimmy-cli

# Install openfortivpn
- name: Install openfortivpn package
  dnf:
    name: openfortivpn
    state: present
  tags:
    - applications
    - vpn

# Install Mullvad VPN
- name: Check Fedora version for Mullvad repository
  command: rpm -E %fedora
  register: fedora_version
  changed_when: false
  tags:
    - applications
    - vpn
    - mullvad

- name: Add Mullvad VPN repository (Fedora 41+)
  command: dnf config-manager addrepo --from-repofile=https://repository.mullvad.net/rpm/stable/mullvad.repo
  args:
    creates: /etc/yum.repos.d/mullvad.repo
  when: fedora_version.stdout|int >= 41
  tags:
    - applications
    - vpn
    - mullvad

- name: Add Mullvad VPN repository (Fedora 40 and earlier)
  command: dnf config-manager --add-repo https://repository.mullvad.net/rpm/stable/mullvad.repo
  args:
    creates: /etc/yum.repos.d/mullvad.repo
  when: fedora_version.stdout|int <= 40
  tags:
    - applications
    - vpn
    - mullvad

- name: Install Mullvad VPN package
  dnf:
    name: mullvad-vpn
    state: present
  tags:
    - applications
    - vpn
    - mullvad

# Install Btrfs Assistant
- name: Install Btrfs Assistant package
  dnf:
    name: "{{ btrfs_assistant_package_name }}"
    state: present
  tags:
    - applications
    - btrfs
    - openfortivpn

# Add VPN alias to user's .bashrc
- name: Check if vpnunibo alias already exists in .bashrc
  shell: grep -q "^alias vpnunibo=" "/home/{{ local_user }}/.bashrc"
  register: vpnunibo_alias_check
  failed_when: false
  changed_when: false
  become: false
  tags:
    - applications
    - vpn
    - openfortivpn

- name: Add vpnunibo alias to .bashrc
  lineinfile:
    path: "/home/{{ local_user }}/.bashrc"
    line: "alias vpnunibo='sudo openfortivpn vpn.unibo.it:443 -u arcangelo.massari@unibo.it'"
    state: present
  when: vpnunibo_alias_check.rc != 0
  become: false
  tags:
    - applications
    - vpn
    - openfortivpn

# Install Google Chrome
- name: Add Google Chrome repository
  yum_repository:
    name: google-chrome
    description: Google Chrome Repository
    baseurl: "{{ google_chrome_repo_url }}"
    gpgkey: https://dl.google.com/linux/linux_signing_key.pub
    gpgcheck: yes
    enabled: yes
  tags:
    - applications
    - chrome

- name: Install Google Chrome
  dnf:
    name: "{{ google_chrome_package_name }}"
    state: present
  tags:
    - applications
    - chrome

- name: Install Spotify Flatpak
  community.general.flatpak:
    name: "{{ spotify_flatpak_app_id }}"
    state: present
  tags:
    - applications
    - spotify

- name: Install LibreOffice Flatpak
  community.general.flatpak:
    name: "{{ libreoffice_flatpak_app_id }}"
    state: present
  tags:
    - applications
    - libreoffice

- name: Install Brave Browser Flatpak
  community.general.flatpak:
    name: "{{ brave_flatpak_app_id }}"
    state: present
  tags:
    - applications
    - brave

- name: Install Zotero Flatpak
  community.general.flatpak:
    name: "{{ zotero_flatpak_app_id }}"
    state: present
  tags:
    - applications
    - zotero

# Install Conky from Source with Lua/Cairo support
- name: Install Conky build dependencies
  become: true
  ansible.builtin.dnf:
    name:
      # Base build tools
      - cmake
      - gcc
      - gcc-c++
      - gperf
      - patch # Needed for build process
      # Core Conky libs (X11, ncurses, xml)
      - libX11-devel
      - libXext-devel
      - libXdamage-devel
      - libXfixes-devel
      - libXft-devel
      - libXinerama-devel
      - ncurses-devel
      - libxml2-devel
      # Feature libs (Lua, Cairo, Imlib2, Curl)
      - lua-devel
      - cairo-devel # Needed for Lua Cairo bindings
      - imlib2-devel
      - libcurl-devel
      # Wayland support
      - wayland-devel
      - wayland-protocols-devel
      # SVG rendering via Lua
      - librsvg2-devel
      # Optional but potentially useful
      - git
    state: present
  tags:
    - applications
    - conky
    - conky-build

- name: Create Conky build directory
  ansible.builtin.file:
    path: "{{ conky_build_dir }}"
    state: directory
    mode: '0755'
  tags:
    - applications
    - conky
    - conky-build

- name: Download Conky source tarball
  ansible.builtin.get_url:
    url: "{{ conky_source_url }}"
    dest: "{{ conky_build_dir }}/conky-{{ conky_version }}.tar.gz"
  tags:
    - applications
    - conky
    - conky-build

- name: Unarchive Conky source tarball
  ansible.builtin.unarchive:
    src: "{{ conky_build_dir }}/conky-{{ conky_version }}.tar.gz"
    dest: "{{ conky_build_dir }}"
    remote_src: yes
    creates: "{{ conky_src_dir }}/CMakeLists.txt" # Avoid re-extracting
  tags:
    - applications
    - conky
    - conky-build

- name: Create CMake build directory inside source
  ansible.builtin.file:
    path: "{{ conky_src_dir }}/build"
    state: directory
    mode: '0755'
  tags:
    - applications
    - conky
    - conky-build

- name: Configure Conky build with CMake
  ansible.builtin.command: >
    cmake ..
    -D CMAKE_INSTALL_PREFIX=/usr/local
    -D CMAKE_BUILD_TYPE=Release
    -D BUILD_LUA_CAIRO=ON
    -D BUILD_LUA_IMLIB2=ON
    -D BUILD_LUA_RSVG=ON
    -D BUILD_NVIDIA=OFF
    -D BUILD_WAYLAND=ON
    -D BUILD_AUDACIOUS=OFF
    -D BUILD_MPD=OFF
  args:
    chdir: "{{ conky_src_dir }}/build"
    creates: "{{ conky_src_dir }}/build/Makefile" # Avoid re-configuring
  tags:
    - applications
    - conky
    - conky-build

- name: Compile Conky
  ansible.builtin.command: make -j{{ ansible_processor_vcpus | default(1) }}
  args:
    chdir: "{{ conky_src_dir }}/build"
    creates: "{{ conky_src_dir }}/build/src/conky" # Avoid re-compiling
  tags:
    - applications
    - conky
    - conky-build

- name: Install Conky
  become: true
  ansible.builtin.command: make install
  args:
    chdir: "{{ conky_src_dir }}/build"
    creates: /usr/local/sbin/conky # Avoid re-installing if binary exists
  tags:
    - applications
    - conky
    - conky-build

# Install lm-sensors (for Conky CPU temp)
- name: Install lm-sensors package
  become: true
  ansible.builtin.dnf:
    name: lm_sensors
    state: present
  tags:
    - applications
    - conky
    - sensors

# Configure Conky
- name: Ensure Conky config base directory exists
  become: false
  become_user: "{{ local_user }}"
  ansible.builtin.file:
    path: "/home/{{ local_user }}/.config/conky"
    state: directory
    mode: '0755'
  tags:
    - applications
    - conky
    - conky-config

- name: Ensure Conky images directory exists
  become: false
  become_user: "{{ local_user }}"
  ansible.builtin.file:
    path: "/home/{{ local_user }}/.config/conky/images"
    state: directory
    mode: '0755'
  tags:
    - applications
    - conky
    - conky-config

- name: Deploy Conky configuration file (hybrid)
  become: false
  become_user: "{{ local_user }}"
  ansible.builtin.copy:
    src: "hybrid/hybrid{% if conky_resolution == 'fhd' %}-fhd{% endif %}.conf"
    dest: "/home/{{ local_user }}/.config/conky/conky.conf"
    mode: '0644'
  tags:
    - applications
    - conky
    - conky-config

- name: Ensure Conky Lua script directory exists
  become: false
  become_user: "{{ local_user }}"
  ansible.builtin.file:
    path: "/home/{{ local_user }}/.config/conky/hybrid/lua"
    state: directory
    mode: '0755'
  tags:
    - applications
    - conky
    - conky-config

- name: Deploy Conky Lua script (hybrid)
  become: false
  become_user: "{{ local_user }}"
  ansible.builtin.copy:
    src: "hybrid/lua/hybrid-rings{% if conky_resolution == 'fhd' %}-fhd{% endif %}.lua"
    dest: "/home/{{ local_user }}/.config/conky/hybrid/lua/hybrid-rings{% if conky_resolution == 'fhd' %}-fhd{% endif %}.lua"
    mode: '0644'
  tags:
    - applications
    - conky
    - conky-config

- name: Deploy Conky images (hybrid)
  become: false
  become_user: "{{ local_user }}"
  ansible.builtin.copy:
    src: hybrid/images/
    dest: "/home/{{ local_user }}/.config/conky/images/"
    mode: '0644'
  tags:
    - applications
    - conky
    - conky-config

- name: Ensure user fonts directory exists
  become: false
  become_user: "{{ local_user }}"
  ansible.builtin.file:
    path: "/home/{{ local_user }}/.local/share/fonts"
    state: directory
    mode: '0755'
  tags:
    - applications
    - conky
    - conky-config
    - fonts

- name: Deploy Conky fonts (hybrid)
  become: false
  become_user: "{{ local_user }}"
  ansible.builtin.copy:
    src: hybrid/fonts/
    dest: "/home/{{ local_user }}/.local/share/fonts/"
    mode: '0644'
  register: font_copy_result
  tags:
    - applications
    - conky
    - conky-config
    - fonts

- name: Update font cache
  become: false
  become_user: "{{ local_user }}"
  ansible.builtin.command:
    cmd: fc-cache -fv
  when: font_copy_result.changed
  changed_when: false # fc-cache always returns 0, so don't mark as changed
  tags:
    - applications
    - conky
    - conky-config
    - fonts

# Autostart Conky via systemd user service
- name: Ensure systemd user directory exists
  become: false
  become_user: "{{ local_user }}"
  ansible.builtin.file:
    path: "/home/{{ local_user }}/.config/systemd/user"
    state: directory
    mode: '0755'
  tags:
    - applications
    - conky
    - conky-config
    - conky-autostart

- name: Deploy Conky systemd user service file
  become: false
  become_user: "{{ local_user }}"
  ansible.builtin.template:
    src: conky.service.j2
    dest: "/home/{{ local_user }}/.config/systemd/user/conky.service"
    mode: '0644'
  register: conky_service_file
  tags:
    - applications
    - conky
    - conky-config
    - conky-autostart

- name: Enable and start Conky systemd user service
  become: false
  become_user: "{{ local_user }}"
  ansible.builtin.systemd:
    name: conky
    scope: user
    enabled: yes
    state: started # Start it immediately if not running
    daemon_reload: yes # Reload daemon if service file changed
  when: conky_service_file.changed # Only run if the service file was created/updated
  tags:
    - applications
    - conky
    - conky-config
    - conky-autostart

# Install TeXLive packages
- name: Install TeXLive packages
  dnf:
    name: "{{ texlive_packages }}"
    state: present
  tags:
    - applications
    - texlive
    - latex

# Install Okular PDF viewer
- name: Install Okular PDF viewer
  dnf:
    name: "{{ okular_package_name }}"
    state: present
  tags:
    - applications
    - okular
    - pdf

# Install PlantUML
- name: Install PlantUML package
  dnf:
    name: "{{ plantuml_package_name }}"
    state: present
  tags:
    - applications
    - plantuml

- name: Install Portfolio Flutter App
  import_tasks: portfolio.yml
  tags:
    - applications
    - portfolio