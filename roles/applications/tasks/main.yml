---
# Check if Cursor is already installed
- name: Check if Cursor AppImage exists
  stat:
    path: "{{ cursor_appimage_dest }}"
  register: cursor_appimage_check
  tags:
    - applications
    - cursor

- name: Check if Cursor version metadata file exists
  stat:
    path: "{{ cursor_metadata_file }}"
  register: cursor_metadata_check
  tags:
    - applications
    - cursor

- name: Extract version from cursor_appimage_url
  set_fact:
    new_cursor_version: "{{ cursor_appimage_url | regex_search('Cursor-([0-9]+\\.[0-9]+\\.[0-9]+)', '\\1') | first }}"
  tags:
    - applications
    - cursor

- name: Debug cursor_appimage_url and extracted version
  debug:
    msg: 
      - "URL: {{ cursor_appimage_url }}"
      - "Extracted version: {{ new_cursor_version }}"
  tags:
    - applications
    - cursor

- name: Read installed Cursor version from metadata file
  slurp:
    src: "{{ cursor_metadata_file }}"
  register: installed_cursor_version_raw
  when: cursor_metadata_check.stat.exists
  tags:
    - applications
    - cursor

- name: Set installed Cursor version from metadata
  set_fact:
    installed_cursor_version: "{{ installed_cursor_version_raw.content | b64decode | trim }}"
  when: cursor_metadata_check.stat.exists and installed_cursor_version_raw is success
  tags:
    - applications
    - cursor

- name: Set default version for Cursor if no metadata exists
  set_fact:
    installed_cursor_version: "0.0.0"
  when: not cursor_metadata_check.stat.exists
  tags:
    - applications
    - cursor

- name: Debug version comparison
  debug:
    msg:
      - "Installed Cursor version: {{ installed_cursor_version | default('unknown') }}"
      - "New Cursor version: {{ new_cursor_version }}"
  tags:
    - applications
    - cursor

- name: Set version check result
  set_fact:
    cursor_needs_update: "{{ not cursor_appimage_check.stat.exists or installed_cursor_version != new_cursor_version }}"
  tags:
    - applications
    - cursor

- name: Debug update decision
  debug:
    msg: "Cursor needs update: {{ cursor_needs_update }}"
  tags:
    - applications
    - cursor

- name: Check if Cursor is in PATH
  stat:
    path: "{{ bin_dir | default('/usr/local/bin') }}/cursor"
  register: cursor_in_path
  tags:
    - applications
    - cursor

# Remove old Cursor version if a different version is being installed
- name: Remove old Cursor AppImage if version is different
  file:
    path: "{{ cursor_appimage_dest }}"
    state: absent
  when: cursor_appimage_check.stat.exists and cursor_needs_update
  tags:
    - applications
    - cursor

# Install Cursor AppImage
- name: Create directory for AppImages
  file:
    path: "{{ appimages_dir }}"
    state: directory
    mode: '0755'
  when: cursor_needs_update or not cursor_in_path.stat.exists
  tags:
    - applications
    - cursor

- name: Download Cursor AppImage
  get_url:
    url: "{{ cursor_appimage_url }}"
    dest: "{{ cursor_appimage_dest }}"
    mode: '0755'
  when: cursor_needs_update
  tags:
    - applications
    - cursor

- name: Save new Cursor version to metadata file
  copy:
    content: "{{ new_cursor_version }}"
    dest: "{{ cursor_metadata_file }}"
    mode: '0644'
  when: cursor_needs_update
  tags:
    - applications
    - cursor

- name: Create temporary directory for AppImage extraction
  file:
    path: /tmp/cursor-extract
    state: directory
    mode: '0755'
  when: cursor_needs_update
  tags:
    - applications
    - cursor

- name: Extract AppImage to get icon
  command: "{{ cursor_appimage_dest }} --appimage-extract"
  args:
    chdir: /tmp/cursor-extract
    creates: /tmp/cursor-extract/squashfs-root
  when: cursor_needs_update
  tags:
    - applications
    - cursor

- name: Find icon file
  find:
    paths: /tmp/cursor-extract/squashfs-root
    patterns: "*.png,*.svg,*.ico"
    recurse: yes
  register: icon_files
  when: cursor_needs_update
  tags:
    - applications
    - cursor

- name: Create icons directory if it doesn't exist
  file:
    path: "{{ cursor_icon_dest | dirname }}"
    state: directory
    mode: '0755'
  when: cursor_needs_update
  tags:
    - applications
    - cursor

- name: Copy icon to system icons directory
  copy:
    src: "{{ icon_files.files[0].path }}"
    dest: "{{ cursor_icon_dest }}"
    mode: '0644'
    remote_src: yes
  when: cursor_needs_update and icon_files.files | length > 0
  tags:
    - applications
    - cursor

- name: Create desktop entry for Cursor
  template:
    src: cursor.desktop.j2
    dest: "{{ cursor_desktop_entry_dest }}"
    mode: '0644'
  when: cursor_needs_update
  tags:
    - applications
    - cursor

# Add Cursor to PATH
- name: Create bin directory if it doesn't exist
  file:
    path: "{{ bin_dir | default('/usr/local/bin') }}"
    state: directory
    mode: '0755'
  become: true
  when: not cursor_in_path.stat.exists
  tags:
    - applications
    - cursor

- name: Create symbolic link to Cursor in PATH
  file:
    src: "{{ cursor_appimage_dest }}"
    dest: "{{ bin_dir | default('/usr/local/bin') }}/cursor"
    state: link
  become: true
  when: not cursor_in_path.stat.exists or cursor_needs_update
  tags:
    - applications
    - cursor

- name: Clean up temporary extraction directory
  file:
    path: /tmp/cursor-extract
    state: absent
  when: cursor_needs_update
  tags:
    - applications
    - cursor

# Install Windsurf AI
- name: Extract version from windsurf_tarball_url
  set_fact:
    new_windsurf_version: "{{ windsurf_tarball_url | regex_search('Windsurf-linux-x64-([0-9]+\\.[0-9]+\\.[0-9]+)', '\\1') | first }}"
  tags:
    - applications
    - windsurf

- name: Check if Windsurf is already installed
  stat:
    path: "{{ windsurf_binary_path }}"
  register: windsurf_check
  tags:
    - applications
    - windsurf

- name: Debug windsurf_tarball_url and extracted version
  debug:
    msg: 
      - "URL: {{ windsurf_tarball_url }}"
      - "Extracted version: {{ new_windsurf_version }}"
  tags:
    - applications
    - windsurf

- name: Check if Windsurf version metadata file exists
  stat:
    path: "{{ windsurf_install_dir }}/version"
  register: windsurf_metadata_check
  tags:
    - applications
    - windsurf

- name: Read installed Windsurf version from metadata file
  slurp:
    src: "{{ windsurf_install_dir }}/version"
  register: installed_windsurf_version_raw
  when: windsurf_metadata_check.stat.exists
  tags:
    - applications
    - windsurf

- name: Set installed Windsurf version from metadata
  set_fact:
    installed_windsurf_version: "{{ installed_windsurf_version_raw.content | b64decode | trim }}"
  when: windsurf_metadata_check.stat.exists and installed_windsurf_version_raw is success
  tags:
    - applications
    - windsurf

- name: Set default version for Windsurf if no metadata exists
  set_fact:
    installed_windsurf_version: "0.0.0"
  when: not windsurf_metadata_check.stat.exists
  tags:
    - applications
    - windsurf

- name: Debug Windsurf version comparison
  debug:
    msg:
      - "Installed Windsurf version: {{ installed_windsurf_version | default('unknown') }}"
      - "New Windsurf version: {{ new_windsurf_version }}"
  tags:
    - applications
    - windsurf

- name: Set Windsurf version check result
  set_fact:
    windsurf_needs_update: "{{ not windsurf_check.stat.exists or installed_windsurf_version != new_windsurf_version }}"
  tags:
    - applications
    - windsurf

- name: Debug Windsurf update decision
  debug:
    msg: "Windsurf needs update: {{ windsurf_needs_update }}"
  tags:
    - applications
    - windsurf

- name: Create Windsurf installation directory
  file:
    path: "{{ windsurf_install_dir }}"
    state: directory
    mode: '0755'
  when: windsurf_needs_update
  tags:
    - applications
    - windsurf

- name: Download Windsurf tarball
  get_url:
    url: "{{ windsurf_tarball_url }}"
    dest: "{{ windsurf_install_dir }}/windsurf.tar.gz"
    mode: '0644'
  when: windsurf_needs_update
  tags:
    - applications
    - windsurf

- name: Extract Windsurf tarball
  unarchive:
    src: "{{ windsurf_install_dir }}/windsurf.tar.gz"
    dest: "{{ windsurf_install_dir }}"
    remote_src: yes
  when: windsurf_needs_update
  tags:
    - applications
    - windsurf

- name: Remove tarball after extraction
  file:
    path: "{{ windsurf_install_dir }}/windsurf.tar.gz"
    state: absent
  when: windsurf_needs_update
  tags:
    - applications
    - windsurf

- name: Save new Windsurf version to metadata file
  copy:
    content: "{{ new_windsurf_version }}"
    dest: "{{ windsurf_install_dir }}/version"
    mode: '0644'
  when: windsurf_needs_update
  tags:
    - applications
    - windsurf

- name: Create icons directory for Windsurf
  file:
    path: "{{ windsurf_icon_dest | dirname }}"
    state: directory
    mode: '0755'
  when: windsurf_needs_update
  tags:
    - applications
    - windsurf

- name: Copy Windsurf icon
  copy:
    src: "{{ windsurf_install_dir }}/Windsurf/resources/app/resources/linux/code.png"
    dest: "{{ windsurf_icon_dest }}"
    mode: '0644'
    remote_src: yes
  when: windsurf_needs_update
  tags:
    - applications
    - windsurf

- name: Create desktop entry for Windsurf
  template:
    src: windsurf.desktop.j2
    dest: "{{ windsurf_desktop_entry_dest }}"
    mode: '0644'
  when: windsurf_needs_update
  tags:
    - applications
    - windsurf

- name: Check if Windsurf is in PATH
  stat:
    path: "{{ bin_dir | default('/usr/local/bin') }}/windsurf"
  register: windsurf_in_path
  tags:
    - applications
    - windsurf

- name: Create symbolic link to Windsurf in PATH
  file:
    src: "{{ windsurf_binary_path }}"
    dest: "{{ bin_dir | default('/usr/local/bin') }}/windsurf"
    state: link
  become: true
  when: not windsurf_in_path.stat.exists or windsurf_needs_update
  tags:
    - applications
    - windsurf

# Install Discord from Flathub
- name: Check if Flathub is enabled
  command: flatpak remotes --columns=name
  register: flatpak_remotes
  changed_when: false
  tags:
    - applications
    - discord

- name: Enable Flathub if not already enabled
  command: flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
  when: "'flathub' not in flatpak_remotes.stdout"
  tags:
    - applications
    - discord

- name: Check if Discord is already installed
  command: flatpak list --app --columns=application
  register: installed_flatpaks
  changed_when: false
  tags:
    - applications
    - discord

- name: Install Discord from Flathub
  command: flatpak install -y flathub {{ discord_flatpak_app_id }}
  when: "discord_flatpak_app_id not in installed_flatpaks.stdout"
  tags:
    - applications
    - discord

# Install VLC from Flathub
- name: Check if VLC is already installed
  command: flatpak list --app --columns=application
  register: installed_flatpaks_vlc
  changed_when: false
  tags:
    - applications
    - vlc

- name: Install VLC from Flathub
  command: flatpak install -y flathub {{ vlc_flatpak_app_id }}
  when: "vlc_flatpak_app_id not in installed_flatpaks_vlc.stdout"
  tags:
    - applications
    - vlc

# Install openfortivpn
- name: Install openfortivpn package
  dnf:
    name: openfortivpn
    state: present
  tags:
    - applications
    - vpn
    - openfortivpn

# Add VPN alias to user's .bashrc
- name: Check if vpnunibo alias already exists in .bashrc
  shell: grep -q "^alias vpnunibo=" "/home/{{ local_user }}/.bashrc"
  register: vpnunibo_alias_check
  failed_when: false
  changed_when: false
  become: false
  tags:
    - applications
    - vpn
    - openfortivpn

- name: Add vpnunibo alias to .bashrc
  lineinfile:
    path: "/home/{{ local_user }}/.bashrc"
    line: "alias vpnunibo='sudo openfortivpn vpn.unibo.it:443 -u arcangelo.massari@unibo.it'"
    state: present
  when: vpnunibo_alias_check.rc != 0
  become: false
  tags:
    - applications
    - vpn
    - openfortivpn 