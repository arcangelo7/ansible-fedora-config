---
- name: Check if gnome-tweaks is installed
  command: rpm -q gnome-tweaks
  register: gnome_tweaks_check
  changed_when: false
  failed_when: false
  check_mode: no
  tags:
    - desktop
    - themes

- name: Install gnome-tweaks
  dnf:
    name:
      - gnome-tweaks
    state: present
  when: gnome_tweaks_check.rc != 0
  tags:
    - desktop
    - themes

- name: Check installed GNOME extensions
  command: rpm -q gnome-shell-extension-appindicator gnome-shell-extension-dash-to-dock gnome-extensions-app
  register: gnome_extensions_check
  changed_when: false
  failed_when: false
  check_mode: no
  tags:
    - desktop
    - gnome-extensions

- name: Install GNOME extensions
  dnf:
    name:
      - gnome-shell-extension-appindicator
      - gnome-shell-extension-dash-to-dock
      - gnome-extensions-app
    state: present
  when: gnome_extensions_check.rc != 0
  tags:
    - desktop
    - gnome-extensions

# Install gTile GNOME extension manually from GitHub release
- name: Set gTile version and download URL
  set_fact:
    gtile_version: "V64"
    gtile_download_url: "https://github.com/gTile/gTile/releases/download/V64/gtile.dist.tgz"
    gtile_archive_path: "/tmp/gtile-V64.dist.tgz"
  tags:
    - desktop
    - gnome-extensions
    - gtile
    - always # Ensure facts are always set

- name: Check if gTile is already installed
  command: gnome-extensions list
  register: gtile_installed_check
  changed_when: false
  failed_when: false # Don't fail if command fails (e.g., gnome-extensions not found yet)
  check_mode: no
  become: no
  tags:
    - desktop
    - gnome-extensions
    - gtile

- name: Download gTile release archive
  get_url:
    url: "{{ gtile_download_url }}"
    dest: "{{ gtile_archive_path }}"
    mode: '0644'
  become: no
  when: "'gTile@vibou' not in gtile_installed_check.stdout"
  tags:
    - desktop
    - gnome-extensions
    - gtile

- name: Install gTile from archive
  command: "gnome-extensions install -f {{ gtile_archive_path }}"
  register: gtile_install_result
  changed_when: "'Extension \"gTile@vibou\" installed' in gtile_install_result.stdout"
  become: no
  when: "'gTile@vibou' not in gtile_installed_check.stdout"
  tags:
    - desktop
    - gnome-extensions
    - gtile

- name: Check if gTile is enabled
  command: gnome-extensions list --enabled
  register: gtile_enabled_check
  changed_when: false
  failed_when: false
  check_mode: no
  become: no
  tags:
    - desktop
    - gnome-extensions
    - gtile

- name: Clean up gTile archive
  file:
    path: "{{ gtile_archive_path }}"
    state: absent
  become: no
  when: (gtile_install_result is defined and gtile_install_result.changed) or ('gTile@vibou' not in gtile_installed_check.stdout)
  tags:
    - desktop
    - gnome-extensions
    - gtile
    - cleanup

- name: Inform user about manual gTile enablement and restart
  debug:
    msg:
      - "gTile GNOME Shell extension has been installed."
      - "To enable it, you first need to restart GNOME Shell (logout/login or restart the system)."
      - "After restarting, you can enable gTile manually (e.g., via the Extensions app or by running: gnome-extensions enable gTile@vibou)"
  when: gtile_install_result is defined and gtile_install_result.changed
  tags:
    - desktop
    - gnome-extensions
    - gtile
    - always # Show message if installation happened

- name: Check if Flatpak is installed
  command: which flatpak
  register: flatpak_check
  changed_when: false
  failed_when: false
  check_mode: no
  tags:
    - desktop
    - browser

- name: Ensure Flatpak is installed
  dnf:
    name: flatpak
    state: present
  become: yes
  when: flatpak_check.rc != 0
  tags:
    - desktop
    - browser

- name: Check if Flathub repository is added
  command: flatpak remote-list
  register: flathub_check
  changed_when: false
  check_mode: no
  tags:
    - desktop
    - browser

- name: Add Flathub repository
  command: flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
  become: yes
  when: "'flathub' not in flathub_check.stdout"
  tags:
    - desktop
    - browser

- name: Check if Thunderbird is installed
  command: rpm -q thunderbird
  register: thunderbird_check
  changed_when: false
  failed_when: false
  check_mode: no
  tags:
    - desktop
    - email
    - thunderbird

- name: Install Thunderbird email client
  dnf:
    name: thunderbird
    state: present
  when: thunderbird_check.rc != 0
  tags:
    - desktop
    - email
    - thunderbird

- name: Check if GNOME Remote Desktop is installed
  command: rpm -q gnome-remote-desktop
  register: remote_desktop_check
  changed_when: false
  failed_when: false
  check_mode: no
  tags:
    - desktop
    - remote-desktop

- name: Install GNOME Remote Desktop
  dnf:
    name:
      - gnome-remote-desktop
    state: present
  when: remote_desktop_check.rc != 0
  tags:
    - desktop
    - remote-desktop

- name: Install Python psutil module
  become: yes
  package:
    name: python3-psutil
    state: present
  tags:
    - desktop
    - remote-desktop

- name: Enable GNOME Remote Desktop service for user
  systemd:
    name: gnome-remote-desktop.service
    scope: user
    state: started
    enabled: yes
  become: no
  tags:
    - desktop
    - remote-desktop

# Configure GNOME Remote Desktop RDP settings
- name: Configure GNOME Remote Desktop RDP settings
  dconf:
    key: "/org/gnome/desktop/remote-desktop/rdp/{{ item.key }}"
    value: "{{ item.value }}"
    state: present
  with_items:
    - { key: 'enable', value: 'true' }
    - { key: 'tls-cert', value: "'{{ ansible_user_dir }}/.local/share/gnome-remote-desktop/rdp-tls.crt'" }
    - { key: 'tls-key', value: "'{{ ansible_user_dir }}/.local/share/gnome-remote-desktop/rdp-tls.key'" }
    - { key: 'view-only', value: 'false' }
  become: no
  tags:
    - desktop
    - remote-desktop

- name: Check if RDP certificate exists
  stat:
    path: "{{ ansible_user_dir }}/.local/share/gnome-remote-desktop/rdp-tls.crt"
  register: rdp_cert
  tags:
    - desktop
    - remote-desktop

- name: Create gnome-remote-desktop directory if it doesn't exist
  file:
    path: "{{ ansible_user_dir }}/.local/share/gnome-remote-desktop"
    state: directory
    mode: '0700'
  when: not rdp_cert.stat.exists
  tags:
    - desktop
    - remote-desktop

- name: Install openssl
  become: yes
  package:
    name: openssl
    state: present
  when: not rdp_cert.stat.exists
  tags:
    - desktop
    - remote-desktop

- name: Generate RDP certificate and key
  shell: cd {{ ansible_user_dir }}/.local/share/gnome-remote-desktop && openssl req -new -x509 -days 3650 -nodes -out rdp-tls.crt -keyout rdp-tls.key -subj "/CN={{ ansible_hostname }}"
  when: not rdp_cert.stat.exists
  tags:
    - desktop
    - remote-desktop

- name: Set permissions on TLS cert and key
  file:
    path: "{{ item }}"
    mode: '0600'
  loop:
    - "{{ ansible_user_dir }}/.local/share/gnome-remote-desktop/rdp-tls.crt"
    - "{{ ansible_user_dir }}/.local/share/gnome-remote-desktop/rdp-tls.key"
  when: not rdp_cert.stat.exists
  tags:
    - desktop
    - remote-desktop

- name: Allow RDP through the firewall
  firewalld:
    service: rdp
    permanent: true
    state: enabled
    immediate: yes
  become: yes
  tags:
    - desktop
    - remote-desktop
    - firewall

# Install ddcui for monitor brightness control
- name: Check if dnf-plugins-core is installed
  command: rpm -q dnf-plugins-core
  register: dnf_plugins_core_check
  changed_when: false
  failed_when: false
  check_mode: no
  tags:
    - desktop
    - monitor
    - ddcui

- name: Install dnf-plugins-core if not installed
  dnf:
    name: dnf-plugins-core
    state: present
  when: dnf_plugins_core_check.rc != 0
  tags:
    - desktop
    - monitor
    - ddcui

- name: Enable rockowitz/ddcutil COPR repository
  command: dnf copr enable -y rockowitz/ddcutil
  register: enable_copr_result
  changed_when: "'enabled' in enable_copr_result.stdout"
  failed_when: false
  tags:
    - desktop
    - monitor
    - ddcui

- name: Install ddcutil and ddcui
  dnf:
    name: 
      - ddcutil
      - ddcui
    state: present
  tags:
    - desktop
    - monitor
    - ddcui

- name: Create modules-load.d directory for ddcutil
  file:
    path: /etc/modules-load.d
    state: directory
    mode: '0755'
  tags:
    - desktop
    - monitor
    - ddcui

- name: Configure kernel modules for ddcutil
  copy:
    dest: /etc/modules-load.d/ddcutil.conf
    content: |
      # Load i2c modules needed by ddcutil
      i2c_dev
      i2c_core
    mode: 0644
  tags:
    - desktop
    - monitor
    - ddcui

- name: Check if i2c modules are already loaded
  shell: lsmod | grep -q '^{{ item }}\s' && echo "loaded" || echo "not_loaded"
  register: i2c_modules_check
  changed_when: false
  failed_when: false
  check_mode: no
  loop:
    - i2c_dev
    - i2c_core
  tags:
    - desktop
    - monitor
    - ddcui

- name: Load i2c kernel modules immediately
  modprobe:
    name: "{{ item.item }}"
    state: present
  loop: "{{ i2c_modules_check.results }}"
  when: item.stdout == "not_loaded"
  tags:
    - desktop
    - monitor
    - ddcui

- name: Add udev rules for i2c access
  copy:
    dest: /etc/udev/rules.d/90-i2c-permissions.rules
    content: |
      # Give i2c group members permission to access the devices
      KERNEL=="i2c-[0-9]*", GROUP="i2c", MODE="0660"
    mode: 0644
  register: udev_rules_result
  tags:
    - desktop
    - monitor
    - ddcui

- name: Create i2c group if it doesn't exist
  group:
    name: i2c
    state: present
    system: yes
  tags:
    - desktop
    - monitor
    - ddcui

- name: Add user to i2c group
  user:
    name: "{{ local_user }}"
    groups: i2c
    append: yes
  register: user_group_result
  tags:
    - desktop
    - monitor
    - ddcui

- name: Reload udev rules
  command: udevadm control --reload-rules && udevadm trigger
  when: udev_rules_result.changed or user_group_result.changed
  tags:
    - desktop
    - monitor
    - ddcui

# Desktop Background Configuration
- name: Create user backgrounds directory
  file:
    path: "/home/{{ local_user }}/.local/share/backgrounds"
    state: directory
    mode: '0755'
  become: no
  tags:
    - desktop
    - background

- name: Copy background image
  copy:
    src: roles/desktop/images/wallhaven-q621dq.png
    dest: "/home/{{ local_user }}/.local/share/backgrounds/@wallhaven-732y3e.png"
    mode: '0644'
  become: no
  tags:
    - desktop
    - background

- name: Set GNOME desktop background
  dconf:
    key: "/org/gnome/desktop/background/{{ item }}"
    value: "'file:///home/{{ local_user }}/.local/share/backgrounds/@wallhaven-732y3e.png'"
    state: present
  loop:
    - picture-uri
    - picture-uri-dark  # Set for dark mode as well
  become: no # dconf settings are per-user
  tags:
    - desktop
    - background
    - gnome-settings

- name: Deploy mimeapps.list for default applications
  template:
    src: mimeapps.list.j2
    dest: "/home/{{ local_user }}/.config/mimeapps.list"
    mode: '0644'
  become: no
  tags:
    - desktop
    - mimeapps
    - default-apps

# Tilix terminal emulator and keybinding
- name: Check if Tilix is installed
  command: rpm -q tilix
  register: tilix_check
  changed_when: false
  failed_when: false
  check_mode: no
  tags:
    - desktop
    - terminal
    - tilix

- name: Install Tilix terminal emulator
  dnf:
    name: tilix
    state: present
  when: tilix_check.rc != 0
  tags:
    - desktop
    - terminal
    - tilix
- name: Configure custom keybinding name for terminal
  dconf:
    key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/terminal-launcher/name"
    value: "'Launch Terminal'"
    state: present
  become: no
  tags:
    - desktop
    - terminal
    - keybinding

- name: Configure custom keybinding command for terminal
  dconf:
    key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/terminal-launcher/command"
    value: "'tilix'"
    state: present
  become: no
  tags:
    - desktop
    - terminal
    - keybinding

- name: Configure custom keybinding shortcut for terminal
  dconf:
    key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/terminal-launcher/binding"
    value: "'<Primary><Alt>t'"
    state: present
  become: no
  tags:
    - desktop
    - terminal
    - keybinding

- name: Register terminal-launcher in custom keybindings list
  dconf:
    key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings"
    value: "['/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/terminal-launcher/']"
    state: present
  become: no
  tags:
    - desktop
    - terminal
    - keybinding